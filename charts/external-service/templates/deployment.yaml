apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogdb-deployment
  namespace: "{{ .Values.namespace }}"
  labels:
    app: catalogdb_label
spec:
  replicas: 1
  selector:
    matchLabels:
      app: catalogdb_label
  template:
    metadata:
      labels:
        app: catalogdb_label
    spec:
      containers:
      - name: catalogdb-postgres
        image: postgres:13.2-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres
        - name: POSTGRES_DB
          value: CatalogDb
        volumeMounts:
        - name: catalog-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: catalog-storage
        persistentVolumeClaim:
          claimName: catalog-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: catalogdb
  namespace: "{{ .Values.namespace }}"
spec:
  selector:
    app: catalogdb_label
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: basketdb-deployment
  namespace: "{{ .Values.namespace }}"
  labels:
    app: basketdb_label
spec:
  replicas: 1
  selector:
    matchLabels:
      app: basketdb_label
  template:
    metadata:
      labels:
        app: basketdb_label
    spec:
      containers:
      - name: basketdb-postgres
        image: postgres:13.2-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres
        - name: POSTGRES_DB
          value: BasketDb
        volumeMounts:
        - name: basket-storage
          mountPath: /var/lib/postgresql/data
    volumes:
      - name: basket-storage
        persistentVolumeClaim:
          claimName: basket-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: basketdb
  namespace: "{{ .Values.namespace }}"
spec:
  selector:
    app: basketdb_label
  ports:
  - protocol: TCP
    port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: distributedcache-depl
  namespace: "{{ .Values.namespace }}"
  labels:
    app: distributedcache_label
spec:
  replicas: 1
  selector:
    matchLabels:
      app: distributedcache_label
  template:
    metadata:
      labels:
        app: distributedcache_label
    spec:
      containers:
      - name: distributedcache-redis
        image: redis:7.4.1-alpine
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: distributedcache
  namespace: "{{ .Values.namespace }}"
spec:
  selector:
    app: distributedcache_label
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orderdb-depl
  namespace: "{{ .Values.namespace }}"
  labels:
    app: orderdb_label
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orderdb_label
  template:
    metadata:
      labels:
        app: orderdb_label
    spec:
      containers:
      - name: orderdb-mssql
        image: mcr.microsoft.com/mssql/server
        ports:
        - containerPort: 1433
        env:
        - name: ACCEPT_EULA
          value: "Y"
        - name: MSSQL_SA_PASSWORD
          value: "SwN12345678"
        volumeMounts:
        - name: order-storage
          mountPath: /var/opt/mssql
      volumes:
      - name: order-storage
        persistentVolumeClaim:
          claimName: order-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: orderdb
  namespace: "{{ .Values.namespace }}"
spec:
  selector:
    app: orderdb_label
  ports:
  - protocol: TCP
    port: 1433
    targetPort: 1433

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: userdb-depl
  namespace: "{{ .Values.namespace }}"
  labels:
    app: userdb_label
spec:
  replicas: 1
  selector:
    matchLabels:
      app: userdb_label
  template:
    metadata:
      labels:
        app: userdb_label
    spec:
      containers:
      - name: userdb-mongo
        image: mongo
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: user-storage
          mountPath: /data/db
      volumes:
      - name: user-storage
        persistentVolumeClaim:
          claimName: user-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: "{{ .Values.namespace }}"
spec:
  selector:
    app: userdb_label
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: messagebroker-depl
  namespace: "{{ .Values.namespace }}"
  labels:
    app: messagebroker_label
spec:
  replicas: 1
  selector:
    matchLabels:
      app: messagebroker_label
  template:
    metadata:
      labels:
        app: messagebroker_label
    spec:
      containers:
      - name: messagebroker-rabbitmq
        image: rabbitmq:3.12.14-management-alpine
        ports:
        - containerPort: 5672
        - containerPort: 15672
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: "guest"
        - name: RABBITMQ_DEFAULT_PASS
          value: "guest"
        volumeMounts:
        - name: rabbitmq-storages
          mountPath: /var/lib/rabbitmq
      volumes:
      - name: rabbitmq-storage
        persistentVolumeClaim:
          claimName: rabbitmq-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: ecommerce-mq
  namespace: "{{ .Values.namespace }}"
spec:
  selector:
    app: messagebroker_label
  ports:
  - protocol: TCP
    name: amqp
    port: 5672
    targetPort: 5672
  - protocol: TCP
    name: management
    port: 15672
    targetPort: 15672